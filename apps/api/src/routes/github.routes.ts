import { appendFileSync } from "fs";
import { TodoistApi } from "@doist/todoist-api-typescript";
import express from "express";
import { z } from "zod";

import { env } from "../env";

const router = express.Router();

// export const defaultWebhookSchema = z
//   .object({
//     action: z.string(),
//     sender: z.unknown(),
//     repository: z.unknown(),
//   })
//   .passthrough();

export const reviewRequestedSchema = z
  .object({
    action: z.literal("review_requested"),
    number: z.number(),
    pull_request: z.object({
      url: z.string(),
      id: z.number(),
      //   node_id: z.string(),
      //   html_url: z.string(),
      //   diff_url: z.string(),
      //   patch_url: z.string(),
      //   issue_url: z.string(),
      number: z.number(),
      state: z.enum(["open", "closed"]),
      locked: z.boolean(),
      title: z.string(),
      //   user: z.object({
      //     login: z.string(),
      //     id: z.number(),
      //     node_id: z.string(),
      //     avatar_url: z.string(),
      //     gravatar_id: z.string(),
      //     url: z.string(),
      //     html_url: z.string(),
      //     followers_url: z.string(),
      //     following_url: z.string(),
      //     gists_url: z.string(),
      //     starred_url: z.string(),
      //     subscriptions_url: z.string(),
      //     organizations_url: z.string(),
      //     repos_url: z.string(),
      //     events_url: z.string(),
      //     received_events_url: z.string(),
      //     type: z.string(),
      //     site_admin: z.boolean(),
      //   }),
      body: z.string(),
      created_at: z.string(),
      //   updated_at: z.string(),
      //   closed_at: z.null(),
      //   merged_at: z.null(),
      //   merge_commit_sha: z.string(),
      //   assignee: z.null(),
      assignees: z.array(z.unknown()),
      requested_reviewers: z.array(z.unknown()),
      //   requested_reviewers: z.array(
      //     z.object({
      //       login: z.string(),
      //       id: z.number(),
      //       node_id: z.string(),
      //       avatar_url: z.string(),
      //       gravatar_id: z.string(),
      //       url: z.string(),
      //       html_url: z.string(),
      //       followers_url: z.string(),
      //       following_url: z.string(),
      //       gists_url: z.string(),
      //       starred_url: z.string(),
      //       subscriptions_url: z.string(),
      //       organizations_url: z.string(),
      //       repos_url: z.string(),
      //       events_url: z.string(),
      //       received_events_url: z.string(),
      //       type: z.string(),
      //       site_admin: z.boolean(),
      //     }),
      //   ),
      //   requested_teams: z.array(z.unknown()),
      //   labels: z.array(z.unknown()),
      //   milestone: z.null(),
      //   draft: z.boolean(),
      //   commits_url: z.string(),
      //   review_comments_url: z.string(),
      //   review_comment_url: z.string(),
      //   comments_url: z.string(),
      //   statuses_url: z.string(),
      head: z.object({
        label: z.string(),
        ref: z.string(),
        sha: z.string(),
        user: z.object({
          login: z.string(),
          id: z.number(),
          node_id: z.string(),
          avatar_url: z.string(),
          gravatar_id: z.string(),
          url: z.string(),
          html_url: z.string(),
          followers_url: z.string(),
          following_url: z.string(),
          gists_url: z.string(),
          starred_url: z.string(),
          subscriptions_url: z.string(),
          organizations_url: z.string(),
          repos_url: z.string(),
          events_url: z.string(),
          received_events_url: z.string(),
          type: z.string(),
          site_admin: z.boolean(),
        }),
        repo: z.object({
          id: z.number(),
          node_id: z.string(),
          name: z.string(),
          full_name: z.string(),
          private: z.boolean(),
          owner: z.object({
            login: z.string(),
            id: z.number(),
            node_id: z.string(),
            avatar_url: z.string(),
            gravatar_id: z.string(),
            url: z.string(),
            html_url: z.string(),
            followers_url: z.string(),
            following_url: z.string(),
            gists_url: z.string(),
            starred_url: z.string(),
            subscriptions_url: z.string(),
            organizations_url: z.string(),
            repos_url: z.string(),
            events_url: z.string(),
            received_events_url: z.string(),
            type: z.string(),
            site_admin: z.boolean(),
          }),
          html_url: z.string(),
          description: z.null(),
          fork: z.boolean(),
          url: z.string(),
          forks_url: z.string(),
          keys_url: z.string(),
          collaborators_url: z.string(),
          teams_url: z.string(),
          hooks_url: z.string(),
          issue_events_url: z.string(),
          events_url: z.string(),
          assignees_url: z.string(),
          branches_url: z.string(),
          tags_url: z.string(),
          blobs_url: z.string(),
          git_tags_url: z.string(),
          git_refs_url: z.string(),
          trees_url: z.string(),
          statuses_url: z.string(),
          languages_url: z.string(),
          stargazers_url: z.string(),
          contributors_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          commits_url: z.string(),
          git_commits_url: z.string(),
          comments_url: z.string(),
          issue_comment_url: z.string(),
          contents_url: z.string(),
          compare_url: z.string(),
          merges_url: z.string(),
          archive_url: z.string(),
          downloads_url: z.string(),
          issues_url: z.string(),
          pulls_url: z.string(),
          milestones_url: z.string(),
          notifications_url: z.string(),
          labels_url: z.string(),
          releases_url: z.string(),
          deployments_url: z.string(),
          created_at: z.string(),
          updated_at: z.string(),
          pushed_at: z.string(),
          git_url: z.string(),
          ssh_url: z.string(),
          clone_url: z.string(),
          svn_url: z.string(),
          homepage: z.string(),
          size: z.number(),
          stargazers_count: z.number(),
          watchers_count: z.number(),
          language: z.string(),
          has_issues: z.boolean(),
          has_projects: z.boolean(),
          has_downloads: z.boolean(),
          has_wiki: z.boolean(),
          has_pages: z.boolean(),
          has_discussions: z.boolean(),
          forks_count: z.number(),
          mirror_url: z.null(),
          archived: z.boolean(),
          disabled: z.boolean(),
          open_issues_count: z.number(),
          license: z.null(),
          allow_forking: z.boolean(),
          is_template: z.boolean(),
          web_commit_signoff_required: z.boolean(),
          topics: z.array(z.unknown()),
          visibility: z.string(),
          forks: z.number(),
          open_issues: z.number(),
          watchers: z.number(),
          default_branch: z.string(),
          allow_squash_merge: z.boolean(),
          allow_merge_commit: z.boolean(),
          allow_rebase_merge: z.boolean(),
          allow_auto_merge: z.boolean(),
          delete_branch_on_merge: z.boolean(),
          allow_update_branch: z.boolean(),
          use_squash_pr_title_as_default: z.boolean(),
          squash_merge_commit_message: z.string(),
          squash_merge_commit_title: z.string(),
          merge_commit_message: z.string(),
          merge_commit_title: z.string(),
        }),
      }),
      base: z.object({
        label: z.string(),
        ref: z.string(),
        sha: z.string(),
        user: z.object({
          login: z.string(),
          id: z.number(),
          node_id: z.string(),
          avatar_url: z.string(),
          gravatar_id: z.string(),
          url: z.string(),
          html_url: z.string(),
          followers_url: z.string(),
          following_url: z.string(),
          gists_url: z.string(),
          starred_url: z.string(),
          subscriptions_url: z.string(),
          organizations_url: z.string(),
          repos_url: z.string(),
          events_url: z.string(),
          received_events_url: z.string(),
          type: z.string(),
          site_admin: z.boolean(),
        }),
        repo: z.object({
          id: z.number(),
          node_id: z.string(),
          name: z.string(),
          full_name: z.string(),
          private: z.boolean(),
          owner: z.object({
            login: z.string(),
            id: z.number(),
            node_id: z.string(),
            avatar_url: z.string(),
            gravatar_id: z.string(),
            url: z.string(),
            html_url: z.string(),
            followers_url: z.string(),
            following_url: z.string(),
            gists_url: z.string(),
            starred_url: z.string(),
            subscriptions_url: z.string(),
            organizations_url: z.string(),
            repos_url: z.string(),
            events_url: z.string(),
            received_events_url: z.string(),
            type: z.string(),
            site_admin: z.boolean(),
          }),
          html_url: z.string(),
          description: z.null(),
          fork: z.boolean(),
          url: z.string(),
          forks_url: z.string(),
          keys_url: z.string(),
          collaborators_url: z.string(),
          teams_url: z.string(),
          hooks_url: z.string(),
          issue_events_url: z.string(),
          events_url: z.string(),
          assignees_url: z.string(),
          branches_url: z.string(),
          tags_url: z.string(),
          blobs_url: z.string(),
          git_tags_url: z.string(),
          git_refs_url: z.string(),
          trees_url: z.string(),
          statuses_url: z.string(),
          languages_url: z.string(),
          stargazers_url: z.string(),
          contributors_url: z.string(),
          subscribers_url: z.string(),
          subscription_url: z.string(),
          commits_url: z.string(),
          git_commits_url: z.string(),
          comments_url: z.string(),
          issue_comment_url: z.string(),
          contents_url: z.string(),
          compare_url: z.string(),
          merges_url: z.string(),
          archive_url: z.string(),
          downloads_url: z.string(),
          issues_url: z.string(),
          pulls_url: z.string(),
          milestones_url: z.string(),
          notifications_url: z.string(),
          labels_url: z.string(),
          releases_url: z.string(),
          deployments_url: z.string(),
          created_at: z.string(),
          updated_at: z.string(),
          pushed_at: z.string(),
          git_url: z.string(),
          ssh_url: z.string(),
          clone_url: z.string(),
          svn_url: z.string(),
          homepage: z.string(),
          size: z.number(),
          stargazers_count: z.number(),
          watchers_count: z.number(),
          language: z.string(),
          has_issues: z.boolean(),
          has_projects: z.boolean(),
          has_downloads: z.boolean(),
          has_wiki: z.boolean(),
          has_pages: z.boolean(),
          has_discussions: z.boolean(),
          forks_count: z.number(),
          mirror_url: z.null(),
          archived: z.boolean(),
          disabled: z.boolean(),
          open_issues_count: z.number(),
          license: z.null(),
          allow_forking: z.boolean(),
          is_template: z.boolean(),
          web_commit_signoff_required: z.boolean(),
          topics: z.array(z.unknown()),
          visibility: z.string(),
          forks: z.number(),
          open_issues: z.number(),
          watchers: z.number(),
          default_branch: z.string(),
          allow_squash_merge: z.boolean(),
          allow_merge_commit: z.boolean(),
          allow_rebase_merge: z.boolean(),
          allow_auto_merge: z.boolean(),
          delete_branch_on_merge: z.boolean(),
          allow_update_branch: z.boolean(),
          use_squash_pr_title_as_default: z.boolean(),
          squash_merge_commit_message: z.string(),
          squash_merge_commit_title: z.string(),
          merge_commit_message: z.string(),
          merge_commit_title: z.string(),
        }),
      }),
      _links: z.object({
        // self: z.object({ href: z.string() }),
        html: z.object({ href: z.string() }),
        // issue: z.object({ href: z.string() }),
        // comments: z.object({ href: z.string() }),
        // review_comments: z.object({ href: z.string() }),
        // review_comment: z.object({ href: z.string() }),
        // commits: z.object({ href: z.string() }),
        // statuses: z.object({ href: z.string() }),
      }),
      //   author_association: z.string(),
      //   auto_merge: z.null(),
      //   active_lock_reason: z.null(),
      //   merged: z.boolean(),
      //   mergeable: z.boolean(),
      //   rebaseable: z.boolean(),
      //   mergeable_state: z.string(),
      //   merged_by: z.null(),
      //   comments: z.number(),
      //   review_comments: z.number(),
      //   maintainer_can_modify: z.boolean(),
      //   commits: z.number(),
      //   additions: z.number(),
      //   deletions: z.number(),
      //   changed_files: z.number(),
    }),
    requested_reviewer: z.object({
      login: z.string(),
      id: z.number(),
      //   node_id: z.string(),
      avatar_url: z.string(),
      gravatar_id: z.string(),
      url: z.string(),
      html_url: z.string(),
      //   followers_url: z.string(),
      //   following_url: z.string(),
      //   gists_url: z.string(),
      //   starred_url: z.string(),
      //   subscriptions_url: z.string(),
      //   organizations_url: z.string(),
      //   repos_url: z.string(),
      //   events_url: z.string(),
      //   received_events_url: z.string(),
      type: z.literal("User"),
      //   site_admin: z.boolean(),
    }),
    // repository: z.object({
    //   id: z.number(),
    //   node_id: z.string(),
    //   name: z.string(),
    //   full_name: z.string(),
    //   private: z.boolean(),
    //   owner: z.object({
    //     login: z.string(),
    //     id: z.number(),
    //     node_id: z.string(),
    //     avatar_url: z.string(),
    //     gravatar_id: z.string(),
    //     url: z.string(),
    //     html_url: z.string(),
    //     followers_url: z.string(),
    //     following_url: z.string(),
    //     gists_url: z.string(),
    //     starred_url: z.string(),
    //     subscriptions_url: z.string(),
    //     organizations_url: z.string(),
    //     repos_url: z.string(),
    //     events_url: z.string(),
    //     received_events_url: z.string(),
    //     type: z.string(),
    //     site_admin: z.boolean(),
    //   }),
    //   html_url: z.string(),
    //   description: z.null(),
    //   fork: z.boolean(),
    //   url: z.string(),
    //   forks_url: z.string(),
    //   keys_url: z.string(),
    //   collaborators_url: z.string(),
    //   teams_url: z.string(),
    //   hooks_url: z.string(),
    //   issue_events_url: z.string(),
    //   events_url: z.string(),
    //   assignees_url: z.string(),
    //   branches_url: z.string(),
    //   tags_url: z.string(),
    //   blobs_url: z.string(),
    //   git_tags_url: z.string(),
    //   git_refs_url: z.string(),
    //   trees_url: z.string(),
    //   statuses_url: z.string(),
    //   languages_url: z.string(),
    //   stargazers_url: z.string(),
    //   contributors_url: z.string(),
    //   subscribers_url: z.string(),
    //   subscription_url: z.string(),
    //   commits_url: z.string(),
    //   git_commits_url: z.string(),
    //   comments_url: z.string(),
    //   issue_comment_url: z.string(),
    //   contents_url: z.string(),
    //   compare_url: z.string(),
    //   merges_url: z.string(),
    //   archive_url: z.string(),
    //   downloads_url: z.string(),
    //   issues_url: z.string(),
    //   pulls_url: z.string(),
    //   milestones_url: z.string(),
    //   notifications_url: z.string(),
    //   labels_url: z.string(),
    //   releases_url: z.string(),
    //   deployments_url: z.string(),
    //   created_at: z.string(),
    //   updated_at: z.string(),
    //   pushed_at: z.string(),
    //   git_url: z.string(),
    //   ssh_url: z.string(),
    //   clone_url: z.string(),
    //   svn_url: z.string(),
    //   homepage: z.string(),
    //   size: z.number(),
    //   stargazers_count: z.number(),
    //   watchers_count: z.number(),
    //   language: z.string(),
    //   has_issues: z.boolean(),
    //   has_projects: z.boolean(),
    //   has_downloads: z.boolean(),
    //   has_wiki: z.boolean(),
    //   has_pages: z.boolean(),
    //   has_discussions: z.boolean(),
    //   forks_count: z.number(),
    //   mirror_url: z.null(),
    //   archived: z.boolean(),
    //   disabled: z.boolean(),
    //   open_issues_count: z.number(),
    //   license: z.null(),
    //   allow_forking: z.boolean(),
    //   is_template: z.boolean(),
    //   web_commit_signoff_required: z.boolean(),
    //   topics: z.array(z.unknown()),
    //   visibility: z.string(),
    //   forks: z.number(),
    //   open_issues: z.number(),
    //   watchers: z.number(),
    //   default_branch: z.string(),
    // }),
    //   organization: z.object({
    //     login: z.string(),
    //     id: z.number(),
    //     node_id: z.string(),
    //     url: z.string(),
    //     repos_url: z.string(),
    //     events_url: z.string(),
    //     hooks_url: z.string(),
    //     issues_url: z.string(),
    //     members_url: z.string(),
    //     public_members_url: z.string(),
    //     avatar_url: z.string(),
    //     description: z.string(),
    //   }),
    //   sender: z.object({
    //     login: z.string(),
    //     id: z.number(),
    //     node_id: z.string(),
    //     avatar_url: z.string(),
    //     gravatar_id: z.string(),
    //     url: z.string(),
    //     html_url: z.string(),
    //     followers_url: z.string(),
    //     following_url: z.string(),
    //     gists_url: z.string(),
    //     starred_url: z.string(),
    //     subscriptions_url: z.string(),
    //     organizations_url: z.string(),
    //     repos_url: z.string(),
    //     events_url: z.string(),
    //     received_events_url: z.string(),
    //     type: z.string(),
    //     site_admin: z.boolean(),
    //   }),
  })
  .passthrough();

router.post("/webhook", async (req, res) => {
  const payload = JSON.parse(req.body?.payload);
  console.log("ACTION: ", payload?.action);
  if (payload?.action !== "review_requested") {
    return res.status(200).send("Not interested in this action");
  }

  const parsedPayloadResponse = reviewRequestedSchema.safeParse(payload);
  if (parsedPayloadResponse.success === false) {
    return res.status(200).send("Not interested in this action");
  }
  const parsedPayload = parsedPayloadResponse.data;

  // check if the requested reviewer is the member we are interested in
  if (parsedPayload.requested_reviewer.login !== env.GITHUB_TARGET_REVIEWER) {
    return res.status(200).send("Not interested in this reviewer");
  }

  console.log(`Handling PR #${parsedPayload.pull_request.number}`);

  // if so, create a new task in todoist
  console.log("Creating task in Todoist");
  const todoistAPI = new TodoistApi(env.TODOIST_TOKEN);
  await todoistAPI.addTask({
    content: `Review PR #${parsedPayload.pull_request.number} - ${parsedPayload.pull_request.title}`,
    description: parsedPayload.pull_request._links.html.href,
    // Project: Coinvise
    projectId: env.TODOIST_PROJECT,
    labels: ["PR"],
  });
  console.log("Task created in Todoist");

  return res.status(200).send("OK");
});

export const githubRouter = router;
